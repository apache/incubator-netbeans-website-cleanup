// 
//     Licensed to the Apache Software Foundation (ASF) under one
//     or more contributor license agreements.  See the NOTICE file
//     distributed with this work for additional information
//     regarding copyright ownership.  The ASF licenses this file
//     to you under the Apache License, Version 2.0 (the
//     "License"); you may not use this file except in compliance
//     with the License.  You may obtain a copy of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
//     Unless required by applicable law or agreed to in writing,
//     software distributed under the License is distributed on an
//     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//     KIND, either express or implied.  See the License for the
//     specific language governing permissions and limitations
//     under the License.
//

= javase-intro
:jbake-type: page
:jbake-tags: old-site, needs-review
:jbake-status: published
:keywords: Apache NetBeans  javase-intro
:description: Apache NetBeans  javase-intro
:toc: left
:toc-title:

== Developing General Java Applications

The following short tutorial takes you through some of the basic steps of developing a Java SE application in NetBeans IDE. This tutorial assumes you already have some familiarity with developing Java applications. Along the way, you will see some of the IDE features that simplify application development.

You will create an application that converts several words into a single word that contains one letter from each of the other words. The resulting word is called an _acrostic_.

This tutorial takes approximately 30 minutes to complete. If you would like to do a quicker "Hello World" tutorial, see the link:quickstart.html[NetBeans IDE Java Quick Start Tutorial].

*Contents*

image:netbeans-stamp-80-74.png[title="Content on this page applies to NetBeans IDE 7.4 and 8.0"]

* link:#setup[Project Setup]
* link:#create[Creating and Editing Java Source Code]
* link:#comp[Compiling and Running the Application]
* link:#test[Testing and Debugging the Application]
* link:#build[Building, Running, and Distributing the Application]
* link:#other-tasks[Other Common Tasks]
* link:#nextsteps[Next Steps]

*To complete this tutorial, you need the software and resources listed in the following table.*

|===
|Software or Resource |Version Required 

|link:https://netbeans.org/downloads/index.html[NetBeans IDE] |7.4 or 8.0 

|link:http://www.oracle.com/technetwork/java/javase/downloads/index.html[Java Development Kit (JDK)] |6, 7, or 8 
|===

=== Project Setup

The application you create will contain two projects:

* A Java Class Library project in which you will create a utility class.
* A Java Application project with a main class that implements a method from the library project's utility class.

After you create the projects, you will add the library project to the classpath of the application project. Then you will code the application. The library project will contain a utility class with an `acrostic` method. The `acrostic` method takes an array of words as a parameter and then generates an acrostic based on those words. The MyApp project will contain a main class that calls the `acrostic` method and passes the words that are entered as arguments when the application is run.

*Note:* Strictly speaking, two projects are not needed for such a simple application. This tutorial uses two projects to demonstrate features that you might need for a more complex application.

==== link:[Creating a Java Class Library Project]

1. Choose File > New Project (Ctrl-Shift-N). Under Categories, select Java. Under Projects, select Java Class Library. Click Next.
2. Under Project Name, type `MyLib`. Change the Project Location to any directory on your computer. From now on, this tutorial refers to this directory as `_NetBeansProjects_`.

*Note:* The path specified above should appear as follows in the Project Folder field of the wizard: `` /`_NetBeansProjects_`/MyLib/ ``

3. (Optional) Select the Use Dedicated Folder for Storing Libraries checkbox and specify the location for the libraries folder. See link:http://www.oracle.com/pls/topic/lookup?ctx=nb8000&id=NBDAG455[Sharing a Library with Other Users] in _Developing Applications with NetBeans IDE_ for more information on this option.
4. Click Finish. The MyLib project opens in both the Projects window and the Files window.

==== link:[Creating a Java Application Project]

1. Choose File > New Project. Under Categories, select Java. Under Projects, select Java Application. Click Next.
2. Under Project Name, type `MyApp`. Make sure the Project Location is set to `_NetBeansProjects_`.
3. (Optional) Check the Use Dedicated Folder for Storing Libraries checkbox.
4. Enter `acrostic.Main` as the main class.
5. Ensure that the Create Main Class checkbox is checked.
6. Click Finish. The MyApp project is displayed in the Project window and `Main.java` opens in the Source Editor.

==== link:[Configuring the Compilation Classpath]

Since MyApp is going to depend on a class in MyLib, you have to add MyLib to the classpath of MyApp. Doing so also ensures that classes in the MyApp project can refer to classes in the MyLib project without causing compilation errors. In addition, this enables you to use code completion in the MyApp project to fill in code based on the MyLib project. In the IDE, the classpath is visually represented by the Libraries node.

*To add the library's utility classes to the project classpath:*

1. In the Projects window, right-click the Libraries node for the MyApp project and choose Add Project as shown in the image below.

image:addproj.png[]

2. Browse to `_NetBeansProjects_/` and select the `MyLib` project folder. The Project JAR Files pane shows the JAR files that can be added to the project. Notice that a JAR file for MyLib is listed even though you have not actually built the JAR file yet. This JAR file will get built when you build and run the MyApp project.
3. Click Add Project JAR Files.
4. Expand the Libraries node. The MyLib project's JAR file is added to the MyApp project's classpath.

=== Creating and Editing Java Source Code

Now you need to create a Java package and add the method that you will use to construct the acrostic. After that you need to implement the `acrostic` method in the `Main` class.

==== Creating a Java Package and Class File

1. Right-click the MyLib project node and choose New > Java Class. Type `LibClass` as the name for the new class, type `org.me.mylib` in the Package field, and click Finish. `LibClass.java` opens in the Source Editor.
2. In `LibClass.java`, place the cursor on the line after the class declaration (`public class LibClass {`.
3. Type or paste in the following method code:
[source,java]
----

    public static String acrostic(String[] args) {
        StringBuffer b = new StringBuffer();
        for (int i = 0; i < args.length; i++) {
            if (args[i].length() > i) {
                b.append(args[i].charAt(i));
            } else {
                b.append('?');
            }
        }
        return b.toString();
                }
----
4. If the code that you pasted in is not formatted correctly, press Alt-Shift-F to reformat the entire file.
5. Press Ctrl-S to save the file.

==== Editing a Java File

Now you will add some code to `Main.java`. In doing so, you will see the Source Editor's code completion and code template (abbreviation) features.

1. Select the `Main.java` tab in the Source Editor. If it isn't already open, expand MyApp > Source Packages > acrostic in the Projects window and double-click `Main.java`.
2. Delete the `// TODO code application logic here` comment in the `main` method.
3. In place of the comment type the following:
[source,java]
----

String result = Li
----

Leave the cursor immediately after `Li`. In the next step you will use code completion to turn `Li` into `LibClass`.

4. Press Ctrl-Space to open the code completion box.

A short list of possible ways to complete the word appears. However, the class that you want, `LibClass` might not be there.

5. Press Ctrl-Space again to display a longer list of possible matches.

`LibClass` should be in this list.

6. Select `LibClass` and press Enter. The IDE fills in the rest of the class name and also automatically creates an import statement for the class.

*Note:* The IDE also opens a box above the code completion box that displays Javadoc information for the selected class or package. Since there is no Javadoc information for this package, the box displays a "Cannot find Javadoc" message.

7. In the main method, type a period (.) after `LibClass`. The code completion box opens again.
8. Select the `acrostic(String[]args)` method and press Enter. The IDE fills in the `acrostic` method and the highlights the `args` parameter.
9. Press Enter to accept `args` as the parameter.
10. Type a semicolon (;).

The final line should look like the following line.

[source,java]
----

String result = LibClass.acrostic(args);
----
11. Press Enter to start a new line. Then type `sout` and press Tab. The `sout` abbreviation expands to `System.out.println(""); `with the cursor positioned between the quotation marks. Type `Result =` inside the quotation marks and `+ result` after the end quotation mark.

The final line should look like the following line.

[source,java]
----

System.out.println("Result = " + result);
----
12. Press Ctrl-S to save the file.

*Note:* `sout` is one of many code templates that are available in the Source Editor. To find and edit the list of code templates, choose Tools > Options > Editor > Code Template.

=== Compiling and Running the Application

Now you need to set the main class and execution arguments so that you can run the project.

*Note:* By default, the projects have been created with the Compile on Save feature enabled, so you do not need to compile your code first in order to run the application in the IDE. For more information, see link:http://www.oracle.com/pls/topic/lookup?ctx=nb8000&id=NBDAG525[Compiling a Single Java File] in _Developing Applications with NetBeans IDE_.

==== Setting the Main Class and Execution Arguments

The output of this program is based on arguments that you provide when you run the program. As arguments, you will provide five words, from which the acrostic "Hello" will be generated. The acrostic is assembled from the first letter of the first word, the second letter of the second word, the third letter of the third word, and so on.

*To add the arguments for the IDE to use when running the application:*

1. Right-click the MyApp project node, choose Properties, and select the Run node in the dialog's left pane.

The main class should already be set to `acrostic.Main`.

2. Type `However we all feel zealous `in the Arguments field and click OK.

==== Running the Application

Now that you have created the application and provided runtime arguments for the application, you can test run the application in the IDE.

*To run the application in the IDE:*

1. Right-click the MyApp project node and choose Clean and Build.
2. Choose Run > Run Project (F6).

In the Output window, you should see the output from the program, `Result = Hello ` (the acrostic of the phrase that was passed to the program as an argument).

=== Testing and Debugging the Application

Now you will create and run a test for the project using JUnit and then run the application in the IDE's debugger to check for errors. In the JUnit test, you will test the LibClass by passing a phrase to the `acrostic` method and using an assertion to indicate what you think the result should be.

==== Creating JUnit Tests

1. Right-click the `LibClass.java` node in the Projects window and choose Tools >Create/Update Tests (Ctrl-Shift-U).
2. In the Create Tests dialog box, click OK to run the command with the default options.

*Note:* If this is the first time you have created JUnit tests in the IDE, you will be prompted with the Select JUnit Version dialog box. Press Enter to select JUnit 4.x and continue to the Create Tests dialog box.

The IDE creates the `org.me.mylib` package and the `LibClassTest.java` file in a separate `test` folder. You can find this file by expanding the Test Packages node and the `org.me.mylib` subnode.
3. In `LibClassTest.java`, delete the body of the `public void testAcrostic()` method.
4. In place of the deleted lines, type or paste in the following:
[source,java]
----

System.err.println("Running testAcrostic...");
String result = LibClass.acrostic(new String[]
                  {"fnord", "polly", "tropism"});
                assertEquals("Correct value", "foo", result);
----
5. Save the file by pressing Ctrl-S.

==== Running JUnit Tests

1. Select the MyLib project node and choose Run > Test Project (MyLib) or press Alt-F6. The` MyLib (test)` tab opens in the Output window. The JUnit test cases are compiled and run. The JUnit test result shows that the test passes.
2. You can also run a single test file rather than testing the entire project. Select the `LibClass.java` tab in the Source Editor and choose Run > Test File.

The JUnit API documentation is available from the IDE. Choose Help > Javadoc References > JUnit API.

*Note:* If this is the first time you access Javadoc in the IDE, you need to first choose Help > Javadoc References > More Javadoc. Click Cancel in the Javadoc References dialog box. Then choose Help > Javadoc References > JUnit API.

You can learn more about JUnit by visiting link:http://www.junit.org[http://www.junit.org]

==== Debugging the Application

In this section, you will use the debugger to step through the application and watch the values of variables change as the acrostic is assembled.

*To run the application in the debugger:*

1. In the `LibClass.java` file, go to the `acrostic` method and place the insertion point anywhere inside `b.append(args[i].charAt(i));`. Then press Ctrl-F8 to set a breakpoint.
2. Select the MyApp project node and choose Debug > Debug Project (Ctrl-F5). The IDE opens the Debugger windows and runs the project in the debugger until the breakpoint is reached.
3. Select the Local Variables window in the bottom of the IDE and expand the `args` node. The array of strings contains the phrase you entered as the command arguments.
4. Press F7 (or choose Debug > Step Into) to step through the program and watch the `b` variable change as the acrostic is constructed.

When the program reaches the end, the debugger windows close.

For more information, see link:junit-intro.html[Writing JUnit Tests in NetBeans IDE].

=== Building, Running, and Distributing the Application

Once you are satisfied that your application works properly, you can prepare the application for deployment outside of the IDE. In this section you will build the application's JAR file and then run the JAR file from the command line.

==== Building the Application

The main build command in the IDE is the Clean and Build command. The Clean and Build command deletes previously compiled classes and other build artifacts and then rebuilds the entire project from scratch.

*Notes:* There is also a Build command, which does not delete old build artifacts, but this command is disabled by default. See link:http://www.oracle.com/pls/topic/lookup?ctx=nb8000&id=NBDAG512[About Building Java Projects] in _Developing Applications with NetBeans IDE_ for more information.

*To build the application:*

* Choose Run > Clean and Build Project (Shift-F11).

Output from the Ant build script appears in the Output window. If the Output window does not appear, you can open it manually by choosing Window > Output > Output.

When you clean and build your project, the following things occur:

* Output folders that have been generated by previous build actions are deleted ("cleaned"). (In most cases, these are the `build` and `dist` folders.)
* `build` and `dist` folders are added to your project folder (hereafter referred to as the _PROJECT_HOME_ folder). You can view these folders in the Files window.
* All of the sources are compiled into `.class` files, which are placed into the `_PROJECT_HOME_/build` folder.
* A JAR file containing your project is created inside the `_PROJECT_HOME_/dist` folder.
* If you have specified any libraries for the project (in addition to the JDK), a `lib` folder is created in the `dist` folder. The libraries are copied into `dist/lib`.
* The manifest file in the JAR is updated to include entries that designate the main class and any libraries that are on the project's classpath.

*Note:* You can view the contents of the manifest in the IDE's Files window. After you have built your project, switch to the Files window and navigate to `dist/MyApp.jar`. Expand the node for the JAR file, expand the `META-INF` folder, and double-click `MANIFEST.MF` to display the manifest in the Source Editor.

[source,java]
----

Main-Class: acrostic.Main
            Class-Path: lib/MyLib.jar
----

(To find more about manifest files, you can read link:http://java.sun.com/docs/books/tutorial/deployment/jar/manifestindex.html[this chapter] from the Java Tutorial.)

==== Running the Application Outside of the IDE

*To run the application outside of the IDE:*

1. On your system, open up a command prompt or terminal window.
2. In the command prompt, change directories to the `MyApp/dist` directory.
3. At the command line, type the following statement:
[source,java]
----


                java -jar MyApp.jar However we all feel zealous    
----

The application then executes and returns the following output as shown in the image below:

[source,java]
----

Result = Hello
            
----
link:command-prompt.png[image:command-prompt-smaller.png[]]

==== Distributing the Application to Other Users

Now that you have verified that the application works outside of the IDE, you are ready to distribute the application.

*To distribute the application:*

1. On your system, create a zip file that contains the application JAR file (`MyApp.jar`) and the accompanying `lib` folder that contains `MyLib.jar`.
2. Send the file to the people who will use the application. Instruct them to unpack the zip file, making sure that the `MyApp.jar` file and the `lib` folder are in the same folder.
3. Instruct the users to follow the steps in the link:#running-outside-IDE[Running the Application Outside of the IDE] section above.

=== Other Common Tasks

You have now completed the main part of the tutorial, but there are still some basic tasks that have not been covered. This section includes a few of those tasks.

==== Making the Javadoc Available in the IDE

To view the JavaSE API documentation in the NetBeans IDE, use the Source > Show Documentation command or choose Window > IDE Tools > Javadoc Documentation from the main menu to view API documentation in a separate window.

However, for some third-party libraries, API documentation is not available. In these cases, the Javadoc resources must be manually associated with the IDE.

*To make the Javadoc API documentation available for the Show Javadoc command:*

1. Download the Javadoc API documentation source (see the link:http://wiki.netbeans.org/FaqJavaDoc#Adding_the_JDK_Javadoc_to_the_NetBeans_IDE[FaqJavaDoc] page for additional details).
2. Choose Tools > Java Platforms.
3. Click the Javadoc tab.
4. Click the Add ZIP/Folder button and navigate to the zip file or the folder that contains the Javadoc API documentation on your system. Select the zip file or the folder and click the Add ZIP/Folder button.
5. Click Close.

==== Generating Javadoc for a Project

You can generate compiled Javadoc documentation for your project based on Javadoc comments that you have added to your classes.

*To generate Javadoc documentation for a project:*

1. Select the MyLib project.
2. Choose Run > Generate Javadoc for "MyLib" from the IDE's main menu.
The generated Javadoc is added to the `dist` folder of the project. In addition, the IDE opens a web browser that displays the Javadoc.
link:/about/contact_form.html?to=3&subject=Feedback:%20Developing%20General%20Java%20Applications[Send Feedback on This Tutorial]


=== Next Steps

For more information about using NetBeans IDE to develop Java SE applications, see the following resources:

* link:javase-deploy.html[Packaging and Deploying Desktop Java Applications]
* link:annotations.html[Annotation Processors Support in the NetBeans IDE]
* link:debug-multithreaded.html[Debugging Multithreaded Applications]
* link:../../trails/java-se.html[General Java Development Learning Trail]
* link:../../trails/matisse.html[Java and JavaFX GUI Learning Trail]
* link:../../index.html[NetBeans IDE Docs and Support page]
* link:http://www.oracle.com/pls/topic/lookup?ctx=nb8000&id=NBDAG366[Creating Java Projects] in _Developing Applications with NetBeans IDE_

NOTE: This document was automatically converted to the AsciiDoc format on 2018-03-13, and needs to be reviewed.
