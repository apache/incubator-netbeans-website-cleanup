// 
//     Licensed to the Apache Software Foundation (ASF) under one
//     or more contributor license agreements.  See the NOTICE file
//     distributed with this work for additional information
//     regarding copyright ownership.  The ASF licenses this file
//     to you under the Apache License, Version 2.0 (the
//     "License"); you may not use this file except in compliance
//     with the License.  You may obtain a copy of the License at
// 
//       http://www.apache.org/licenses/LICENSE-2.0
// 
//     Unless required by applicable law or agreed to in writing,
//     software distributed under the License is distributed on an
//     "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
//     KIND, either express or implied.  See the License for the
//     specific language governing permissions and limitations
//     under the License.
//

= ojet-gettingstarted
:jbake-type: page
:jbake-tags: old-site, needs-review
:jbake-status: published
:keywords: Apache NetBeans  ojet-gettingstarted
:description: Apache NetBeans  ojet-gettingstarted
:toc: left
:toc-title:

== Getting Started with Oracle JET Applications

This document provides a step-by-step set of instructions guiding you through the process of getting started with the link:http://oraclejet.org[Oracle JavaScript Extension Toolkit (JET)]. JET empowers developers by providing a modular toolkit based on modern JavaScript, CSS3, and HTML5 design and development principles.

==== Contents

image:netbeans-stamp.png[title="Content on this page applies to the NetBeans IDE 7.4 and 8.0"]

* link:#settingUp[Setting Up]
* link:#installing[Installing Oracle JET Support Plugin]
* link:#downloading[Setting Up the Oracle JET Base Distribution]
* link:#configuring[Configuring the Oracle JET Base Distribution]
* link:#creatingAFirstModule[Creating a First Module]
* link:#usingJETComponents[Using JET Components]
* link:#creating[Creating Additional JET Modules]
* link:#using1[Using the JET Cookbook]
* link:#settingUpIntermodular[Setting Up Intermodular Communication]

===== To complete this tutorial, you will need the following resources.

|===
|Software or Resource |Version Required 

|link:https://netbeans.org/downloads/index.html[NetBeans IDE, the HTML5/JavaScript Bundle] |8.1 
|===

*Notes:*

* This document assumes you have some basic knowledge of, or programming experience with HTML, CSS, and JavaScript.
* Knowledge of the JavaScript frameworks link:http://knockoutjs.com/[Knockout] and link:http://requirejs.org/[Require] is helpful for working through this tutorial, though not mandatory. However, these two popular open source JavaScript libraries play a central role in JET. Hence, the more you are familiar with them, the easier will be your journey into JET.
* It is helpful to install the link:https://chrome.google.com/webstore/detail/netbeans-connector/hafdlehgocfcodbgjnpecfajgkeejnaa[Chrome Connector Plugin for NetBeans] into the Chrome browser. Using the Chrome browser, together with the plugin, with NetBeans IDE 8.1 adds a number of handy features, such as automatic refresh of the browser when you save a file in NetBeans IDE, as well as the possibility to explore the live DOM from within NetBeans IDE.
* To use the same look and feel in NetBeans IDE as used in this tutorial, install the link:http://plugins.netbeans.org/plugin/62424/darcula-laf-for-netbeans[Darcula LAF for NetBeans], which is also available in the Plugin Manager, under Tools | Plugins.

=== Setting Up

In this exercise you set up NetBeans IDE 8.1, as well as the base distribution of Oracle JET.

==== Installing the Oracle JET Support Plugin

In NetBeans IDE 8.1, go to *Tools | Plugins* and install the Oracle JET Support plugin.

image:plugin-1.png[]

This plugin gives you code completion in the HTML editor, together with documentation, for the JET components, such as those you will use later in this document. It also provides complete project templates as the basis of your JET applications.

Once the above plugin is installed in NetBeans IDE 8.1, you will have a number of new features in NetBeans IDE 8.1 that simplify development with Oracle JET and that are used in various parts of this tutorial.

==== Setting Up the Oracle JET Base Distribution

The Oracle JET Base Distribution provides all the JavaScript libraries and CSS stylesheets that provide the absolute minimum starting point of creating JET applications. In this section, you set up the Oracle JET Base Distribution in the IDE as the basis of a new HTML5/JavaScript application.

1. In NetBeans IDE 8.1, select the *HTML5/JavaScript* category and then select *Oracle JET Base Distribution*, as shown below.

image:newhtml5project-1.png[]

Click Next.


Type the name of the application, such as *CustomerVisualizer*, and select a location to store it, as shown below.


image:newhtml5project-8.png[]


Click *Finish* to complete the wizard.

2. When you click Finish, the IDE creates the project, which might take a moment, since several JavaScript libraries are included in the ZIP file. When the unzip process is complete, the IDE displays a node for the project in the Projects window.

You now have a new HTML5/JavaScript project created from the Oracle JET Base Distribution.

image:newhtml5project-7.png[]

Spend some time exploring the project structure of the application. For example, look in *js/libs* and you will see the JavaScript libraries that constitute Oracle JET. After looking through the project structure, continue with the steps that follow to configure the project.

==== Configuring the Oracle JET Base Distribution

In this section, you prepare your JET application for a first deployment. For example, you include the CSS stylesheet and reference the JavaScript file that initializes the application.

1. Create a new `index.html` file in the project root, by going to the New File dialog (Ctrl-N) and then selecting *HTML File* in the *HTML5/JavaScript* category.

2. From *js/libs/oj*, copy the *main-template.js* file, shown below:


image:newhtml5project-6.png[]


Paste the file into the *js* folder and rename it *main.js*, as shown below:


image:main-1.png[]

3. Open the *index.html* file and drag the *js/libs/require.js* file above the closing HEAD element. You should now see this:

[source,xml]
----

<!DOCTYPE html>
<html>
    <head>
        <title>TODO supply a title</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        *<script src="js/libs/require/require.js" type="text/javascript"></script>*
    </head>
    <body>
        <div>TODO write content</div>
    </body>
</html>
----

In the SCRIPT element, set the *data-main* attribute to point to your *main.js* file, as shown below:

*<script data-main="js/main" src="js/libs/require/require.js" type="text/javascript"></script>*

*Note:* The *data-main* attribute is a special attribute that link:http://requirejs.org[Require.js] will check to start script loading. Read more about it link:http://requirejs.org/docs/api.html#data-main[here on the Require.js site].

4. In the *css* folder, notice a variety of CSS stylesheets are included. Drag and drop *oj-alta-min.css*, shown below, beneath the SCRIPT element you added in the previous step.


image:css-1.png[]


You should now see this:

[source,xml]
----

<!DOCTYPE html>
<html>
    <head>
        <title>TODO supply a title</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script src="js/libs/require/require.js" type="text/javascript"></script>
        *<link href="css/libs/oj/v1.1.2/alta/oj-alta-min.css" rel="stylesheet" type="text/css"/>*
    </head>
    <body>
        <div>TODO write content</div>
    </body>
</html>
----

*Note:* Make sure the version number above matches the version you are using, i.e., do not copy and past the above without checking that the version number is correct.

5. Create a root *ViewModel* (link:http://knockoutjs.com/documentation/observables.html[more on Knockout ViewModels here]) in the *require* block within the *main.js* file, as shown below:

[source,java]
----

require(['ojs/ojcore',
    'knockout', 'jquery',
    'ojs/ojknockout', 'ojs/ojbutton',
    'ojs/ojtoolbar', 'ojs/ojmenu'],
        function (oj, ko, $)
        {
            *function DemoViewModel() {
            }
            $(document).ready(
                    function ()
                    {
                        ko.applyBindings(new DemoViewModel());
                    }
            );*
        }
);
----

*Note:* Type *vm* and press TAB and the root ViewModel shown above will be created for you.

You can now run the application and you should see the "TODO write content" message from the *index.html* file in the browser.

=== Creating a First Module

In this exercise you will configure your application to benefit from the modularity features provided by JET. Then you will create your first JET module and load it into the application.

1. Add *ojs/ojmodule* to the *require* block in the *main.js* file.
[source,java]
----

require(['ojs/ojcore',
    'knockout', 'jquery', *'ojs/ojmodule',*
    'ojs/ojknockout', 'ojs/ojbutton',
    'ojs/ojtoolbar', 'ojs/ojmenu'],
----

*Note:* *'ojs/ojmodule',* is the JET module responsible for managing the loading of modules into your application.

2. Create a folder *js/viewModels*, where you will create the JavaScript side of your JET modules, and *js/views*, where you will create the HTML side of your JET modules:


image:viewmodels-1.png[]

3. Right-click on the *js/viewModels* folder and go to *New | Other*. The New File dialog opens, showing templates for creating JET modules, as shown below:


image:viewmodels-2.png[]


Select "Empty JET Module", as shown above, and click Next. Type the name of the JET module, which by convention starts with a lowecase letter, such as *home*, shown below:


image:newhtml5project-2.png[]


Click Finish. Notice that *home.js* is created in *js/viewModels* and that *home.html* is created in *js/views*, as shown below:


image:viewmodels-4.png[]

4. Open the two files that have been created. The JavaScript file is a *define* block, using Require.js syntax, as shown below:

[source,java]
----

/**
 * home module
 */
define(['ojs/ojcore', 'knockout'
], function (oj, ko) {
    /**
     * The view model for the main content view template
     */
    function homeContentViewModel() {
        var self = this;
    }

    return homeContentViewModel;
});
----

The HTML file has the following content:

[source,xml]
----

<h1>home</h1>
----
5. Load the JET module into the *index.html* file, as shown in bold below:
[source,xml]
----

<!DOCTYPE html>
<html>
    <head>
        <title>TODO supply a title</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <script data-main="js/main" src="js/libs/require/require.js" type="text/javascript"></script>
    </head>
    <body>
        *<div data-bind="ojModule: {name: 'home'}"></div>*
    </body>
</html>
----

You can now run the application and you should see the "home" message from the *home* module in the browser.

Congratulations! Your application is configured correctly and you have created and loaded your first module.

=== Using JET Components

In this section, you learn about a variety of different ways of creating JET components.

==== Creating Additional JET Modules

Using the steps described in link:#creatingAFirstModule[Creating a First Module], create some more empty JET modules. Use the "Empty JET Module" wizard, as well as the "Knockout JET Module" wizard:


image:viewmodels-5.png[]


Compare the code between the two. In the latter case, you will see the link:http://knockoutjs.com/examples/helloWorld.html[Hello World sample code from the Knockout.js documentation site].

In each case, you will need the following when creating a new JET module:

* A JavaScript file that provides a *define* block, in *js/viewModels*.
* An HTML file that has the same name as the JavaScript file, in *js/views*.
* A reference in *index.html*, to load the JET module.

Experiment by creating multiple empty JET modules, e.g., a *footer* module and a *header* module.

==== Using the JET Cookbook

In this section, you learn how easy it is to use the Oracle JET Cookbook, which describes all the JET components, while also providing complete code snippets that you can copy/paste into your JET applications.

1. Go to the on-line link:http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html[Oracle JET Cookbook].
2. Browse through the JET components in the Oracle JET Cookbook and get an idea of what's available.
3. Take a look at the link:http://www.oracle.com/webfolder/technetwork/jet/jetCookbook.html?component=barChart&demo=default[Bar Chart] component.
4. 
In the lower part of the page, copy the content of the HTML Editor into your application, within the *home.html* file.

5. Notice that there is component-specific code-completion, and documentation, press Ctrl-Space within *ojChart* to see it:

image:cookbook-1.png[]

Similarly, press Ctrl-Space on a property and you will see code completion, and documentation, too:

image:cookbook-3.png[]

*Note:* Notice that the properties shown in the code completion are context-sensitive to the currently used Oracle JET component. For example, instead of *ojChart* above, use a different component and then press Ctrl-Space over the properties and you will see that only properties that are applicable to the currently used Oracle JET component are shown.

6. In the Output window (Ctrl-4), notice the error messages, because the *home.js* JavaScript file does not yet define the variables you have referenced in your HTML file, as shown below:

image:cookbook-2.png[]

7. In *home.js*, below *var self = this;*, copy the body of the code in the JS Editor section, near the end of the Bar Chart page.

[source,java]
----

/* toggle button variables */
self.stackValue = ko.observable('off');
self.orientationValue = ko.observable('vertical');
/* chart data */
var barSeries = [{name: "Series 1", items: [42, 34]},
                 {name: "Series 2", items: [55, 30]},
                 {name: "Series 3", items: [36, 50]},
                 {name: "Series 4", items: [22, 46]},
                 {name: "Series 5", items: [22, 46]}];

var barGroups = ["Group A", "Group B"];
self.barSeriesValue = ko.observableArray(barSeries);
self.barGroupsValue = ko.observableArray(barGroups);
/* toggle buttons*/
self.stackOptions = [
    {id: 'unstacked', label: 'unstacked', value: 'off', icon: 'oj-icon demo-bar-unstack'},
    {id: 'stacked', label: 'stacked', value: 'on', icon: 'oj-icon demo-bar-stack'}
];
self.orientationOptions = [
    {id: 'vertical', label: 'vertical', value: 'vertical', icon: 'oj-icon demo-bar-vert'},
    {id: 'horizontal', label: 'horizontal', value: 'horizontal', icon: 'oj-icon demo-bar-horiz'}
];
----

*Note:* Be careful not to copy everything in the JS Editor, because the JS Editor has code in a *require* block, while your *home.js* contains a *define* block.

8. To enable the JET Chart component to be loaded into the application, include the *ojs/ojchart* reference in your *define* block, in your *home.js* file, as shown below:

[source,java]
----

define(['ojs/ojcore', 'knockout', *'ojs/ojchart',*
], function (oj, ko) {
----
9. 
Open the application in a browser and you should see the following:


image:chart-1.png[]

Modify and tweak the page as needed, for example, change the H1 element from *home* to something more meaningful, such as *Chart Data*.

As an exercise, choose some other JET components from the Oracle JET Cookbook and integrate them into your application.

=== Setting Up Intermodular Communication

You may need to reference properties across different JET modules. There are three different ways to do so, as outlined below.

1. Use *$root* within an HTML file to access global variables from *main.js*. link:https://blogs.oracle.com/geertjan/entry/intermodular_communication_in_oracle_jet[Details here.]
2. Use *ko.dataFor* within a JavaScript file to access global variables from *main.js*. link:https://blogs.oracle.com/geertjan/entry/intermodular_communication_in_oracle_jet1[Details here.]
3. Use *knockout-postbox* to set up a loosely coupled publish/subscribe mechanism. link:https://blogs.oracle.com/geertjan/entry/intermodular_communication_in_oracle_jet2[Details here.]
link:/about/contact_form.html?to=3&subject=Feedback:%20Getting%20Started%20with%20Oracle%20JET%20Applications[Send Feedback on This Tutorial]



=== See Also

For more information about support for Oracle JET and a variety of HTML5 applications in the IDE on link:https://netbeans.org/[netbeans.org], see the following resources:

* link:html5-editing-css.html[Working with CSS Style Sheets in HTML5 Applications]. A document that continues with the application that you created in this tutorial that demonstrates how to use some of the CSS wizards and windows in the IDE and how to use the Inspect mode in the Chrome browser to visually locate elements in your project sources.
* link:html5-js-support.html[Debugging and Testing JavaScript in HTML5 Applications]. A document that demonstrates how the IDE provides tools that can help you debug and test JavaScript files in the IDE.

NOTE: This document was automatically converted to the AsciiDoc format on 2018-03-13, and needs to be reviewed.
